#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de pr√©-processamento conservador para dataset de diabetes.
Objetivo: Limpar os dados com o M√çNIMO de vi√©s poss√≠vel.
O script original de ML permanece INALTERADO.

Estrat√©gia conservadora:
- Apenas trata valores claramente inv√°lidos (zeros biologicamente imposs√≠veis)
- Usa m√©todos estat√≠sticos robustos para imputa√ß√£o
- N√ÉO remove outliers (podem ser casos reais)
- N√ÉO normaliza (deixa para o algoritmo decidir)
- Mant√©m a distribui√ß√£o original dos dados o m√°ximo poss√≠vel

@author: Pr√©-processamento conservador
"""

import pandas as pd
import numpy as np
from sklearn.impute import KNNImputer
import os


def analyze_data_quality(df):
    """Analisa a qualidade dos dados de forma conservadora"""
    print("=" * 60)
    print("AN√ÅLISE DE QUALIDADE DOS DADOS")
    print("=" * 60)

    print(f"Shape do dataset: {df.shape}")
    print(f"Colunas: {list(df.columns)}")

    print(f"\nDados faltantes por coluna:")
    missing_data = df.isnull().sum()
    for col in df.columns:
        missing_count = missing_data[col]
        missing_pct = (missing_count / len(df)) * 100
        print(f"  {col:25} | {missing_count:3d} valores ({missing_pct:5.1f}%)")

    # An√°lise de zeros em colunas cr√≠ticas
    print(f"\nAn√°lise de zeros em colunas biol√≥gicas:")
    biological_cols = ["Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI"]

    for col in biological_cols:
        if col in df.columns:
            zero_count = (df[col] == 0).sum()
            zero_pct = (zero_count / len(df)) * 100
            print(f"  {col:25} | {zero_count:3d} zeros ({zero_pct:5.1f}%)")

    print(f"\nEstat√≠sticas b√°sicas:")
    print(df.describe().round(2))


def conservative_preprocessing(input_file, output_file):
    """
    Pr√©-processamento CONSERVADOR - aplica apenas corre√ß√µes essenciais

    Princ√≠pios:
    1. S√≥ trata dados claramente inv√°lidos
    2. Mant√©m a distribui√ß√£o original
    3. Usa m√©todos estatisticamente robustos
    4. N√ÉO remove dados (apenas corrige)
    """

    print("=" * 60)
    print("PR√â-PROCESSAMENTO CONSERVADOR")
    print("=" * 60)

    # Carregar dados
    print(f"\n1. Carregando dados originais de: {input_file}")
    df = pd.read_csv(input_file)

    # An√°lise inicial
    analyze_data_quality(df)

    # Criar c√≥pia para processamento
    df_clean = df.copy()
    changes_made = []

    print(f"\n2. Identificando valores biologicamente imposs√≠veis:")

    # ETAPA 1: Tratar apenas zeros BIOLOGICAMENTE IMPOSS√çVEIS
    # Essas s√£o as √∫nicas corre√ß√µes que aplicamos - zeros que s√£o claramente erros
    biological_impossible_zero = {
        "Glucose": "Glicose n√£o pode ser zero em pessoa viva",
        "BloodPressure": "Press√£o arterial n√£o pode ser zero em pessoa viva",
        "BMI": "IMC n√£o pode ser zero em pessoa com peso/altura",
    }

    for col, reason in biological_impossible_zero.items():
        if col in df_clean.columns:
            zero_count = (df_clean[col] == 0).sum()
            if zero_count > 0:
                print(f"   ‚Ä¢ {col}: {zero_count} zeros ‚Üí NaN ({reason})")
                df_clean[col] = df_clean[col].replace(0, np.nan)
                changes_made.append(f"{col}: {zero_count} zeros convertidos para NaN")

    # ETAPA 2: Tratar zeros QUESTION√ÅVEIS mas n√£o imposs√≠veis
    # Para estes, somos mais conservadores
    questionable_zero = {
        "SkinThickness": "Espessura da pele zero √© question√°vel mas poss√≠vel",
        "Insulin": "Insulina zero √© rara mas pode ocorrer em alguns casos",
    }

    print(f"\n   Zeros question√°veis (tratamento conservador):")
    for col, reason in questionable_zero.items():
        if col in df_clean.columns:
            zero_count = (df_clean[col] == 0).sum()
            if zero_count > 0:
                # S√≥ converte se for mais de 10% dos dados (indicativo de erro sistem√°tico)
                zero_pct = (zero_count / len(df_clean)) * 100
                if zero_pct > 10:
                    print(
                        f"   ‚Ä¢ {col}: {zero_count} zeros ‚Üí NaN ({zero_pct:.1f}% indica erro sistem√°tico)"
                    )
                    df_clean[col] = df_clean[col].replace(0, np.nan)
                    changes_made.append(
                        f"{col}: {zero_count} zeros convertidos para NaN"
                    )
                else:
                    print(
                        f"   ‚Ä¢ {col}: {zero_count} zeros mantidos ({zero_pct:.1f}% - pode ser real)"
                    )

    print(f"\n3. Imputa√ß√£o conservadora de dados faltantes:")

    # ETAPA 3: Imputa√ß√£o CONSERVADORA
    # Usamos KNN que preserva rela√ß√µes entre vari√°veis melhor que mediana/m√©dia
    numeric_cols = [
        "Pregnancies",
        "Glucose",
        "BloodPressure",
        "SkinThickness",
        "Insulin",
        "BMI",
        "DiabetesPedigreeFunction",
        "Age",
    ]

    # Verificar se h√° dados para imputar
    missing_counts = df_clean[numeric_cols].isnull().sum()
    total_missing = missing_counts.sum()

    if total_missing > 0:
        print(f"   Dados faltantes encontrados: {total_missing}")
        print(f"   M√©todo: KNN Imputer (k=5) - preserva rela√ß√µes entre vari√°veis")

        # KNN Imputer - m√©todo mais conservador que preserva padr√µes dos dados
        imputer = KNNImputer(n_neighbors=5, weights="uniform")

        # Aplicar imputa√ß√£o apenas nas colunas num√©ricas
        df_clean[numeric_cols] = imputer.fit_transform(df_clean[numeric_cols])

        for col in numeric_cols:
            if missing_counts[col] > 0:
                print(f"   ‚Ä¢ {col}: {missing_counts[col]} valores imputados")
                changes_made.append(
                    f"{col}: {missing_counts[col]} valores imputados via KNN"
                )
    else:
        print(f"   Nenhum dado faltante encontrado ap√≥s convers√£o de zeros.")

    print(f"\n4. Verifica√ß√µes finais:")

    # Verificar se ainda h√° NaN
    final_missing = df_clean.isnull().sum().sum()
    if final_missing > 0:
        print(f"   ‚ö†Ô∏è  ATEN√á√ÉO: {final_missing} dados ainda faltantes!")
        # Aplicar imputa√ß√£o final com mediana (m√©todo mais robusto)
        for col in numeric_cols:
            missing_in_col = df_clean[col].isnull().sum()
            if missing_in_col > 0:
                median_val = df_clean[col].median()
                df_clean[col].fillna(median_val, inplace=True)
                print(
                    f"      {col}: {missing_in_col} preenchidos com mediana ({median_val:.2f})"
                )
    else:
        print(f"   ‚úì Nenhum dado faltante restante")

    # Verificar tipos de dados
    print(f"   ‚úì Verificando tipos de dados...")
    for col in numeric_cols:
        if df_clean[col].dtype == "object":
            df_clean[col] = pd.to_numeric(df_clean[col], errors="coerce")
            print(f"   ‚Ä¢ {col}: convertido para num√©rico")

    # Verificar valores negativos (que seriam biologicamente imposs√≠veis)
    print(f"   ‚úì Verificando valores negativos...")
    negative_found = False
    for col in numeric_cols:
        negative_count = (df_clean[col] < 0).sum()
        if negative_count > 0:
            print(f"   ‚ö†Ô∏è  {col}: {negative_count} valores negativos encontrados")
            # Converter negativos para valores absolutos (assumindo erro de entrada)
            df_clean[col] = df_clean[col].abs()
            negative_found = True
            changes_made.append(f"{col}: {negative_count} valores negativos corrigidos")

    if not negative_found:
        print(f"   ‚úì Nenhum valor negativo encontrado")

    print(f"\n5. Salvando dados pr√©-processados:")

    # Salvar dados limpos
    df_clean.to_csv(output_file, index=False)
    print(f"   Arquivo salvo: {output_file}")

    # Relat√≥rio final
    print(f"\n" + "=" * 60)
    print("RELAT√ìRIO FINAL DO PR√â-PROCESSAMENTO CONSERVADOR")
    print("=" * 60)

    print(f"Dataset original:      {df.shape}")
    print(f"Dataset pr√©-processado: {df_clean.shape}")
    print(f"Linhas removidas:      0 (CONSERVADOR - nenhuma linha removida)")
    print(f"Colunas removidas:     0 (CONSERVADOR - nenhuma coluna removida)")

    print(f"\nMudan√ßas aplicadas:")
    if changes_made:
        for i, change in enumerate(changes_made, 1):
            print(f"  {i}. {change}")
    else:
        print(f"  Nenhuma mudan√ßa necess√°ria - dados j√° estavam limpos!")

    print(f"\nCompara√ß√£o de distribui√ß√µes (m√©dia ¬± desvio):")
    for col in numeric_cols:
        if col in df.columns:
            orig_mean = df[col].mean()
            orig_std = df[col].std()
            new_mean = df_clean[col].mean()
            new_std = df_clean[col].std()

            print(
                f"  {col:20} | Original: {orig_mean:6.2f}¬±{orig_std:5.2f} | "
                f"Processado: {new_mean:6.2f}¬±{new_std:5.2f}"
            )

    print(f"\nPrinc√≠pios aplicados:")
    print(f"  ‚úì Apenas corre√ß√µes essenciais (zeros biologicamente imposs√≠veis)")
    print(f"  ‚úì Preserva√ß√£o da distribui√ß√£o original dos dados")
    print(f"  ‚úì Imputa√ß√£o conservadora (KNN preserva rela√ß√µes)")
    print(f"  ‚úì Nenhuma remo√ß√£o de outliers (podem ser casos reais)")
    print(f"  ‚úì Nenhuma transforma√ß√£o/normaliza√ß√£o aplicada")
    print(f"  ‚úì Formato original mantido para compatibilidade")

    print(f"\n‚úÖ PR√â-PROCESSAMENTO CONSERVADOR CONCLU√çDO!")
    print(f"   O dataset est√° limpo mas mant√©m caracter√≠sticas originais")
    print(f"   Seu script original funcionar√° normalmente com '{output_file}'")
    print("=" * 60)

    return df_clean


def process_application_data(app_file, processed_app_file, reference_stats=None):
    """
    Aplica o mesmo pr√©-processamento conservador aos dados de aplica√ß√£o
    """

    if not os.path.exists(app_file):
        print(f"\nüìã Arquivo {app_file} n√£o encontrado.")
        print(f"   Quando estiver dispon√≠vel, execute este script novamente.")
        return None

    print(f"\n" + "=" * 60)
    print("PR√â-PROCESSAMENTO DOS DADOS DE APLICA√á√ÉO")
    print("=" * 60)

    # Carregar dados de aplica√ß√£o
    print(f"Carregando: {app_file}")
    df_app = pd.read_csv(app_file)
    print(f"Shape: {df_app.shape}")

    # Aplicar as mesmas corre√ß√µes conservadoras
    df_app_clean = df_app.copy()

    # Mesmo tratamento de zeros biologicamente imposs√≠veis
    biological_impossible_zero = ["Glucose", "BloodPressure", "BMI"]
    questionable_zero = ["SkinThickness", "Insulin"]

    print(f"\nAplicando as mesmas corre√ß√µes conservadoras:")

    for col in biological_impossible_zero:
        if col in df_app_clean.columns:
            zero_count = (df_app_clean[col] == 0).sum()
            if zero_count > 0:
                df_app_clean[col] = df_app_clean[col].replace(0, np.nan)
                print(f"  ‚Ä¢ {col}: {zero_count} zeros ‚Üí NaN")

    for col in questionable_zero:
        if col in df_app_clean.columns:
            zero_count = (df_app_clean[col] == 0).sum()
            zero_pct = (zero_count / len(df_app_clean)) * 100
            if zero_count > 0 and zero_pct > 10:
                df_app_clean[col] = df_app_clean[col].replace(0, np.nan)
                print(f"  ‚Ä¢ {col}: {zero_count} zeros ‚Üí NaN")

    # Imputa√ß√£o conservadora
    numeric_cols = [
        "Pregnancies",
        "Glucose",
        "BloodPressure",
        "SkinThickness",
        "Insulin",
        "BMI",
        "DiabetesPedigreeFunction",
        "Age",
    ]

    missing_total = df_app_clean[numeric_cols].isnull().sum().sum()
    if missing_total > 0:
        print(f"\nImputando {missing_total} valores faltantes com KNN...")
        imputer = KNNImputer(n_neighbors=5, weights="uniform")
        df_app_clean[numeric_cols] = imputer.fit_transform(df_app_clean[numeric_cols])

    # Salvar
    df_app_clean.to_csv(processed_app_file, index=False)
    print(f"\nDados de aplica√ß√£o pr√©-processados salvos em: {processed_app_file}")

    return df_app_clean


def main():
    """Fun√ß√£o principal"""

    # Arquivos
    INPUT_FILE = "diabetes_dataset.csv"
    OUTPUT_FILE = "diabetes_dataset_clean.csv"  # Nome simples para facilitar uso

    APP_INPUT_FILE = "diabetes_app.csv"
    APP_OUTPUT_FILE = "diabetes_app_clean.csv"

    # Verificar arquivo de entrada
    if not os.path.exists(INPUT_FILE):
        print(f"‚ùå Erro: Arquivo '{INPUT_FILE}' n√£o encontrado!")
        print(f"   Certifique-se de que o arquivo est√° no diret√≥rio atual.")
        return

    try:
        # Pr√©-processamento conservador dos dados principais
        df_clean = conservative_preprocessing(INPUT_FILE, OUTPUT_FILE)

        # Pr√©-processamento dos dados de aplica√ß√£o (se existirem)
        process_application_data(APP_INPUT_FILE, APP_OUTPUT_FILE)

        print(f"\nüéâ PRONTO PARA USO!")
        print(f"\nPara usar com seu script original:")
        print(
            f"1. Simplesmente substitua 'diabetes_dataset.csv' por 'diabetes_dataset_clean.csv'"
        )
        print(f"2. E 'diabetes_app.csv' por 'diabetes_app_clean.csv' (se aplic√°vel)")
        print(f"3. Todo o resto permanece exatamente igual!")

        print(f"\nAlternativamente, voc√™ pode:")
        print(
            f"‚Ä¢ Renomear o arquivo original: mv diabetes_dataset.csv diabetes_dataset_original.csv"
        )
        print(f"‚Ä¢ Renomear o limpo: mv diabetes_dataset_clean.csv diabetes_dataset.csv")
        print(f"‚Ä¢ Usar seu script sem mudan√ßas!")

    except Exception as e:
        print(f"‚ùå Erro durante pr√©-processamento: {str(e)}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
