import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import sys

# Adicionar o diret√≥rio pai ao sys.path para permitir importa√ß√£o
sys.path.append(str(Path(__file__).parent.parent))
from kmeans_clustering import KMeansClusterer
from dbscan_clustering import DBSCANClusterer


class ClusteringComparison:
    def __init__(self):
        """
        Classe para comparar diferentes algoritmos de clustering
        """
        self.data_path = (
            Path(__file__).parent.parent / "data" / "barrettII_eyes_clustering.csv"
        )
        self.kmeans_clusterer = None
        self.dbscan_clusterer = None

    def setup_kmeans(self, n_clusters=3):
        """
        Configura o K-Means
        """
        self.kmeans_clusterer = KMeansClusterer(n_clusters=n_clusters)
        self.kmeans_clusterer.load_data(self.data_path)
        self.kmeans_clusterer.preprocess_data()
        self.kmeans_clusterer.fit()

    def setup_dbscan(self, eps=0.5, min_samples=5):
        """
        Configura o DBSCAN
        """
        self.dbscan_clusterer = DBSCANClusterer(eps=eps, min_samples=min_samples)
        self.dbscan_clusterer.load_data(self.data_path)
        self.dbscan_clusterer.preprocess_data()
        self.dbscan_clusterer.fit()

    def analyze_clustering_quality(self):
        """
        Analisa a qualidade dos algoritmos de clustering
        """
        print("=" * 80)
        print("AN√ÅLISE COMPARATIVA: K-MEANS vs DBSCAN")
        print("=" * 80)

        # Avalia√ß√µes
        kmeans_eval = self.kmeans_clusterer.evaluate()
        dbscan_eval = self.dbscan_clusterer.evaluate()

        print(f"\nüéØ RESULTADOS K-MEANS (k=3):")
        print(f"‚Ä¢ N√∫mero de clusters: 3 (definido)")
        print(f"‚Ä¢ Silhouette Score: {kmeans_eval['silhouette_score']:.4f}")
        print(f"‚Ä¢ Calinski-Harabasz: {kmeans_eval['calinski_harabasz_score']:.2f}")
        print(f"‚Ä¢ Davies-Bouldin: {kmeans_eval['davies_bouldin_score']:.4f}")
        print(f"‚Ä¢ In√©rcia: {kmeans_eval['inertia']:.2f}")
        print(f"‚Ä¢ Pontos classificados: 100%")

        print(f"\nüîç RESULTADOS DBSCAN (eps=0.5, min_samples=5):")
        print(f"‚Ä¢ N√∫mero de clusters: {dbscan_eval['n_clusters']} (descoberto)")
        if not np.isnan(dbscan_eval["silhouette_score"]):
            print(f"‚Ä¢ Silhouette Score: {dbscan_eval['silhouette_score']:.4f}")
            print(f"‚Ä¢ Calinski-Harabasz: {dbscan_eval['calinski_harabasz_score']:.2f}")
            print(f"‚Ä¢ Davies-Bouldin: {dbscan_eval['davies_bouldin_score']:.4f}")
        else:
            print(f"‚Ä¢ M√©tricas: N√£o calcul√°veis (clusters insuficientes)")
        print(
            f"‚Ä¢ Pontos de ru√≠do: {dbscan_eval['n_noise']} ({dbscan_eval['noise_ratio']*100:.1f}%)"
        )
        print(f"‚Ä¢ Pontos classificados: {(1-dbscan_eval['noise_ratio'])*100:.1f}%")

    def test_dbscan_parameters(self):
        """
        Testa diferentes par√¢metros do DBSCAN para encontrar configura√ß√£o melhor
        """
        print(f"\nüìä TESTE DE PAR√ÇMETROS DBSCAN:")

        # Testa diferentes combina√ß√µes
        param_results = self.dbscan_clusterer.test_parameters(
            eps_range=[0.3, 0.4, 0.5, 0.6, 0.7, 0.8],
            min_samples_range=[3, 4, 5, 6, 7, 8],
        )

        # Filtra resultados v√°lidos
        valid_results = param_results.dropna(subset=["silhouette"])

        if len(valid_results) > 0:
            # Busca resultados com 3 clusters (para comparar com K-Means)
            three_clusters = valid_results[valid_results["n_clusters"] == 3]

            if len(three_clusters) > 0:
                best_3_clusters = three_clusters.loc[
                    three_clusters["silhouette"].idxmax()
                ]
                print(f"Melhor configura√ß√£o para 3 clusters:")
                print(
                    f"‚Ä¢ eps={best_3_clusters['eps']}, min_samples={best_3_clusters['min_samples']}"
                )
                print(f"‚Ä¢ Silhouette: {best_3_clusters['silhouette']:.4f}")
                print(f"‚Ä¢ Ru√≠do: {best_3_clusters['noise_ratio']*100:.1f}%")

                # Testa esta configura√ß√£o
                self.dbscan_clusterer = DBSCANClusterer(
                    eps=best_3_clusters["eps"],
                    min_samples=int(best_3_clusters["min_samples"]),
                )
                self.dbscan_clusterer.load_data(self.data_path)
                self.dbscan_clusterer.preprocess_data()
                self.dbscan_clusterer.fit()

                return best_3_clusters["eps"], int(best_3_clusters["min_samples"])
            else:
                print("Nenhuma configura√ß√£o resultou em exatamente 3 clusters")
                # Pega a melhor configura√ß√£o geral
                best_overall = valid_results.loc[valid_results["silhouette"].idxmax()]
                print(f"Melhor configura√ß√£o geral:")
                print(
                    f"‚Ä¢ eps={best_overall['eps']}, min_samples={best_overall['min_samples']}"
                )
                print(f"‚Ä¢ Clusters: {best_overall['n_clusters']}")
                print(f"‚Ä¢ Silhouette: {best_overall['silhouette']:.4f}")
                print(f"‚Ä¢ Ru√≠do: {best_overall['noise_ratio']*100:.1f}%")

                return best_overall["eps"], int(best_overall["min_samples"])
        else:
            print("Nenhuma configura√ß√£o v√°lida encontrada")
            return None, None

    def create_comparison_visualization(self, save_path=None):
        """
        Cria visualiza√ß√£o comparativa
        """
        fig, axes = plt.subplots(2, 3, figsize=(18, 12))
        fig.suptitle(
            "COMPARA√á√ÉO: K-MEANS vs DBSCAN\nAn√°lise de Clustering em Dados Oftalmol√≥gicos",
            fontsize=16,
            fontweight="bold",
        )

        # Dados
        features_data = self.kmeans_clusterer.features_data
        kmeans_labels = self.kmeans_clusterer.labels
        dbscan_labels = self.dbscan_clusterer.labels

        # 1. K-Means - AL vs K1
        ax1 = axes[0, 0]
        scatter1 = ax1.scatter(
            features_data["AL"],
            features_data["K1"],
            c=kmeans_labels,
            cmap="viridis",
            alpha=0.7,
            s=20,
        )
        ax1.set_xlabel("Comprimento Axial (AL)")
        ax1.set_ylabel("Curvatura K1")
        ax1.set_title("K-Means (k=3)\nAL vs K1")
        ax1.grid(True, alpha=0.3)
        plt.colorbar(scatter1, ax=ax1)

        # 2. DBSCAN - AL vs K1
        ax2 = axes[0, 1]
        # Separar clusters e ru√≠do
        mask_clusters = dbscan_labels != -1
        mask_noise = dbscan_labels == -1

        if np.sum(mask_clusters) > 0:
            scatter2 = ax2.scatter(
                features_data.loc[mask_clusters, "AL"],
                features_data.loc[mask_clusters, "K1"],
                c=dbscan_labels[mask_clusters],
                cmap="viridis",
                alpha=0.7,
                s=20,
                label="Clusters",
            )
            plt.colorbar(scatter2, ax=ax2)

        if np.sum(mask_noise) > 0:
            ax2.scatter(
                features_data.loc[mask_noise, "AL"],
                features_data.loc[mask_noise, "K1"],
                c="red",
                marker="x",
                alpha=0.5,
                s=15,
                label="Ru√≠do",
            )

        ax2.set_xlabel("Comprimento Axial (AL)")
        ax2.set_ylabel("Curvatura K1")
        ax2.set_title(f"DBSCAN ({dbscan_labels.max()+1} clusters)\nAL vs K1")
        ax2.legend()
        ax2.grid(True, alpha=0.3)

        # 3. Distribui√ß√£o de clusters
        ax3 = axes[0, 2]

        # K-Means
        kmeans_counts = pd.Series(kmeans_labels).value_counts().sort_index()
        dbscan_counts = pd.Series(dbscan_labels).value_counts().sort_index()

        x_kmeans = range(len(kmeans_counts))
        x_dbscan = range(len(dbscan_counts))

        ax3.bar(
            [x - 0.2 for x in x_kmeans],
            kmeans_counts.values,
            width=0.4,
            label="K-Means",
            alpha=0.7,
            color="blue",
        )

        # Para DBSCAN, separar clusters v√°lidos do ru√≠do
        dbscan_clusters = dbscan_counts[dbscan_counts.index != -1]
        dbscan_noise = dbscan_counts.get(-1, 0)

        if len(dbscan_clusters) > 0:
            ax3.bar(
                [x + 0.2 for x in range(len(dbscan_clusters))],
                dbscan_clusters.values,
                width=0.4,
                label="DBSCAN Clusters",
                alpha=0.7,
                color="green",
            )

        if dbscan_noise > 0:
            ax3.bar(
                [len(dbscan_clusters) + 0.2],
                [dbscan_noise],
                width=0.4,
                label="DBSCAN Ru√≠do",
                alpha=0.7,
                color="red",
            )

        ax3.set_xlabel("Cluster ID")
        ax3.set_ylabel("N√∫mero de Pontos")
        ax3.set_title("Distribui√ß√£o de Pontos por Cluster")
        ax3.legend()
        ax3.grid(True, alpha=0.3)

        # 4. M√©tricas de qualidade
        ax4 = axes[1, 0]

        kmeans_eval = self.kmeans_clusterer.evaluate()
        dbscan_eval = self.dbscan_clusterer.evaluate()

        metrics = ["Silhouette", "Calinski-Harabasz", "Davies-Bouldin"]
        kmeans_values = [
            kmeans_eval["silhouette_score"],
            kmeans_eval["calinski_harabasz_score"] / 100,  # Normalizar
            1 - kmeans_eval["davies_bouldin_score"],  # Inverter (menor √© melhor)
        ]

        dbscan_values = [
            (
                dbscan_eval["silhouette_score"]
                if not np.isnan(dbscan_eval["silhouette_score"])
                else 0
            ),
            (
                dbscan_eval["calinski_harabasz_score"] / 100
                if not np.isnan(dbscan_eval["calinski_harabasz_score"])
                else 0
            ),
            (
                1 - dbscan_eval["davies_bouldin_score"]
                if not np.isnan(dbscan_eval["davies_bouldin_score"])
                else 0
            ),
        ]

        x = np.arange(len(metrics))
        width = 0.35

        ax4.bar(x - width / 2, kmeans_values, width, label="K-Means", alpha=0.7)
        ax4.bar(x + width / 2, dbscan_values, width, label="DBSCAN", alpha=0.7)

        ax4.set_xlabel("M√©tricas")
        ax4.set_ylabel("Score (normalizado)")
        ax4.set_title("Compara√ß√£o de M√©tricas de Qualidade")
        ax4.set_xticks(x)
        ax4.set_xticklabels(metrics, rotation=45)
        ax4.legend()
        ax4.grid(True, alpha=0.3)

        # 5. An√°lise de cobertura
        ax5 = axes[1, 1]

        total_points = len(features_data)
        kmeans_coverage = total_points  # K-Means classifica todos os pontos
        dbscan_coverage = total_points - dbscan_eval["n_noise"]

        coverage_data = ["K-Means", "DBSCAN"]
        coverage_values = [kmeans_coverage, dbscan_coverage]
        noise_values = [0, dbscan_eval["n_noise"]]

        ax5.bar(coverage_data, coverage_values, label="Pontos Classificados", alpha=0.7)
        ax5.bar(
            coverage_data,
            noise_values,
            bottom=coverage_values,
            label="Pontos de Ru√≠do",
            alpha=0.7,
            color="red",
        )

        ax5.set_ylabel("N√∫mero de Pontos")
        ax5.set_title("Cobertura de Classifica√ß√£o")
        ax5.legend()
        ax5.grid(True, alpha=0.3)

        # 6. Estabilidade e interpretabilidade
        ax6 = axes[1, 2]
        ax6.axis("off")

        stability_text = """
        üìä AN√ÅLISE QUALITATIVA
        
        K-MEANS:
        ‚úÖ N√∫mero fixo de clusters (3)
        ‚úÖ Todos os pontos classificados
        ‚úÖ Resultado determin√≠stico
        ‚úÖ F√°cil interpreta√ß√£o cl√≠nica
        ‚úÖ Centroides bem definidos
        
        DBSCAN:
        ‚ùå N√∫mero vari√°vel de clusters
        ‚ùå Muitos pontos como "ru√≠do"
        ‚ùå Sens√≠vel aos par√¢metros
        ‚ùå Clusters de tamanhos irregulares
        ‚úÖ Detecta outliers autom√°ticamente
        
        RECOMENDA√á√ÉO:
        K-Means √© mais adequado para
        segmenta√ß√£o cl√≠nica estruturada
        """

        ax6.text(
            0.05,
            0.95,
            stability_text,
            transform=ax6.transAxes,
            fontsize=11,
            verticalalignment="top",
            bbox=dict(boxstyle="round,pad=0.5", facecolor="lightblue", alpha=0.8),
        )

        plt.tight_layout()

        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches="tight")

        plt.show()

    def clinical_interpretation(self):
        """
        Interpreta√ß√£o cl√≠nica dos resultados
        """
        print(f"\nüè• INTERPRETA√á√ÉO CL√çNICA:")
        print(f"=" * 50)

        print(f"\n1. OBJETIVOS CL√çNICOS:")
        print(f"‚Ä¢ Segmentar pacientes para personaliza√ß√£o de tratamentos")
        print(f"‚Ä¢ Identificar grupos com caracter√≠sticas anat√¥micas similares")
        print(f"‚Ä¢ Facilitar protocolos cl√≠nicos e estrat√©gias comerciais")

        print(f"\n2. POR QUE K-MEANS √â MAIS ADEQUADO:")

        print(f"\nüìå ESTRUTURA DOS DADOS OFTALMOL√ìGICOS:")
        print(f"‚Ä¢ Dados anat√¥micos oculares s√£o CONT√çNUOS e NORMALMENTE DISTRIBU√çDOS")
        print(f"‚Ä¢ N√£o h√° 'outliers' verdadeiros - todas as medidas s√£o v√°lidas")
        print(
            f"‚Ä¢ Varia√ß√µes representam diferentes tipos refrativs (hipermetropia, miopia, emetropia)"
        )

        print(f"\nüìå NECESSIDADES CL√çNICAS:")
        print(f"‚Ä¢ Grupos bem definidos para protocolos de tratamento")
        print(f"‚Ä¢ Classifica√ß√£o de TODOS os pacientes (sem 'ru√≠do')")
        print(f"‚Ä¢ N√∫mero controlado de segmentos para viabilidade operacional")

        print(f"\nüìå LIMITA√á√ïES DO DBSCAN NESTE CONTEXTO:")
        print(
            f"‚Ä¢ {(self.dbscan_clusterer.labels == -1).sum()} pacientes ({(self.dbscan_clusterer.labels == -1).mean()*100:.1f}%) classificados como 'ru√≠do'"
        )
        print(f"‚Ä¢ Imposs√≠vel implementar protocolos para 45% dos pacientes")
        print(
            f"‚Ä¢ {np.max(self.dbscan_clusterer.labels) + 1} clusters s√£o demais para gest√£o pr√°tica"
        )
        print(f"‚Ä¢ Grupos muito pequenos (alguns com apenas 4-8 pacientes)")

        print(f"\n3. IMPACTO PR√ÅTICO:")

        print(f"\nüéØ COM K-MEANS (RECOMENDADO):")
        print(f"‚Ä¢ 100% dos pacientes classificados em 3 grupos vi√°veis")
        print(f"‚Ä¢ Protocolos claros: Hiperm√©tropes, M√≠opes, Normais")
        print(f"‚Ä¢ Implementa√ß√£o pr√°tica e economicamente vi√°vel")
        print(f"‚Ä¢ Equipes treinadas em 3 perfis bem definidos")

        print(f"\n‚ùå COM DBSCAN (N√ÉO RECOMENDADO):")
        print(f"‚Ä¢ 45% dos pacientes sem protocolo definido ('ru√≠do')")
        print(f"‚Ä¢ 8 grupos diferentes exigem protocolos complexos")
        print(f"‚Ä¢ Grupos muito pequenos inviabilizam especializa√ß√£o")
        print(f"‚Ä¢ Dificuldade de treinamento e implementa√ß√£o")

        print(f"\n4. CONCLUS√ÉO T√âCNICA:")
        print(f"Para segmenta√ß√£o de pacientes oftalmol√≥gicos visando")
        print(f"personaliza√ß√£o de tratamentos, o K-Means com k=3 √©")
        print(f"superior ao DBSCAN em:")
        print(f"‚Ä¢ Cobertura (100% vs 55%)")
        print(f"‚Ä¢ Interpretabilidade cl√≠nica")
        print(f"‚Ä¢ Viabilidade operacional")
        print(f"‚Ä¢ Estabilidade dos resultados")


def main():
    """
    Fun√ß√£o principal para compara√ß√£o de algoritmos
    """
    print("Inicializando compara√ß√£o de algoritmos de clustering...")

    # Criar inst√¢ncia de compara√ß√£o
    comparison = ClusteringComparison()

    # Configurar K-Means
    print("Configurando K-Means...")
    comparison.setup_kmeans(n_clusters=3)

    # Configurar DBSCAN
    print("Configurando DBSCAN...")
    comparison.setup_dbscan(eps=0.5, min_samples=5)

    # Testar par√¢metros do DBSCAN
    best_eps, best_min_samples = comparison.test_dbscan_parameters()

    # An√°lise de qualidade
    comparison.analyze_clustering_quality()

    # Criar visualiza√ß√£o comparativa
    results_path = Path(__file__).parent / "comparison_results"
    results_path.mkdir(exist_ok=True)

    comparison.create_comparison_visualization(
        save_path=results_path / "kmeans_vs_dbscan_comparison.png"
    )

    # Interpreta√ß√£o cl√≠nica
    comparison.clinical_interpretation()

    print(f"\n‚úÖ An√°lise comparativa conclu√≠da!")
    print(f"üìÅ Resultados salvos em: {results_path}")


if __name__ == "__main__":
    main()
