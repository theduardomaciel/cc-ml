"""
An√°lise de Clusteriza√ß√£o - Espessura Epitelial
Atividade 4 - Descoberta de Perfis/Padr√µes de Olhos

Este script executa a an√°lise completa de clusteriza√ß√£o usando K-Means
para identificar perfis de espessura epitelial em mapas oculares.
"""

from pathlib import Path
from kmeans_clustering import KMeansEpithelialClusterer
from optimization import KOptimizer
from presentation import ClientPresentation


def main():
    """
    Executa a an√°lise completa de clusteriza√ß√£o
    """
    # Configura√ß√µes
    data_path = Path(__file__).parent / "data" / "RTVue_20221110_MLClass.csv"
    results_path = Path(__file__).parent / "results"
    results_path.mkdir(exist_ok=True)

    print("=" * 80)
    print(" " * 20 + "AN√ÅLISE DE ESPESSURA EPITELIAL")
    print(" " * 15 + "Descoberta de Perfis/Padr√µes de Olhos")
    print("=" * 80)

    # Op√ß√µes de an√°lise
    print("\nEscolha a an√°lise que deseja executar:")
    print("1. An√°lise Completa (Otimiza√ß√£o + Clusteriza√ß√£o + Apresenta√ß√£o)")
    print("2. Apenas Otimiza√ß√£o do N√∫mero de Clusters")
    print("3. Apenas Clusteriza√ß√£o com K-Means")
    print("4. Apenas Apresenta√ß√£o para Cliente")
    print("5. An√°lise R√°pida (K=3 sem otimiza√ß√£o)")

    choice = input("\nDigite o n√∫mero da op√ß√£o (padr√£o=5): ").strip() or "5"

    if choice == "1":
        # An√°lise completa
        print("\n" + "=" * 80)
        print("EXECUTANDO AN√ÅLISE COMPLETA")
        print("=" * 80)

        # 1. Otimiza√ß√£o
        print("\n" + "-" * 80)
        print("ETAPA 1: OTIMIZA√á√ÉO DO N√öMERO DE CLUSTERS")
        print("-" * 80)
        optimizer = KOptimizer(data_path)
        metrics_df = optimizer.analyze_optimal_k(max_k=10)

        # 2. Pergunta ao usu√°rio qual K usar
        k_choice = input(
            "\nCom base na an√°lise, quantos clusters deseja usar? (padr√£o=3): "
        ).strip()
        k = int(k_choice) if k_choice else 3

        # 3. Clusteriza√ß√£o
        print("\n" + "-" * 80)
        print(f"ETAPA 2: CLUSTERIZA√á√ÉO COM K={k}")
        print("-" * 80)
        clusterer = KMeansEpithelialClusterer(n_clusters=k, random_state=42)
        clusterer.load_data(data_path)
        clusterer.preprocess_data()
        clusterer.fit()
        cluster_stats, cluster_counts = clusterer.get_cluster_profiles()

        print("\nüìä Estat√≠sticas dos Clusters:")
        print(cluster_stats.xs("mean", level=1, axis=1))

        clusterer.visualize_clusters(
            save_path=results_path / "kmeans_distributions.png"
        )
        clusterer.visualize_cluster_means(
            save_path=results_path / "kmeans_profiles.png"
        )
        clusterer.save_results(results_path / "kmeans_results.csv")

        # 4. Apresenta√ß√£o
        print("\n" + "-" * 80)
        print("ETAPA 3: GERANDO APRESENTA√á√ÉO PARA CLIENTE")
        print("-" * 80)
        presentation = ClientPresentation(n_clusters=k)
        presentation.setup_and_train(data_path)
        presentation.generate_full_report()

    elif choice == "2":
        # Apenas otimiza√ß√£o
        optimizer = KOptimizer(data_path)
        metrics_df = optimizer.analyze_optimal_k(max_k=10)
        print("\nüíæ M√©tricas salvas em: results/k_optimization_metrics.csv")
        metrics_df.to_csv(results_path / "k_optimization_metrics.csv", index=False)

    elif choice == "3":
        # Apenas clusteriza√ß√£o
        k_input = input("Quantos clusters deseja usar? (padr√£o=3): ").strip()
        k = int(k_input) if k_input else 3

        clusterer = KMeansEpithelialClusterer(n_clusters=k, random_state=42)
        clusterer.load_data(data_path)
        clusterer.preprocess_data()
        clusterer.fit()
        cluster_stats, cluster_counts = clusterer.get_cluster_profiles()

        print("\nüìä Estat√≠sticas dos Clusters:")
        print(cluster_stats.xs("mean", level=1, axis=1))

        clusterer.visualize_clusters(
            save_path=results_path / "kmeans_distributions.png"
        )
        clusterer.visualize_cluster_means(
            save_path=results_path / "kmeans_profiles.png"
        )
        clusterer.save_results(results_path / "kmeans_results.csv")

    elif choice == "4":
        # Apenas apresenta√ß√£o
        k_input = input("Quantos clusters foram usados? (padr√£o=3): ").strip()
        k = int(k_input) if k_input else 3

        presentation = ClientPresentation(n_clusters=k)
        presentation.setup_and_train(data_path)
        presentation.generate_full_report()

    else:  # choice == "5" ou qualquer outro
        # An√°lise r√°pida com K=3
        print("\n" + "=" * 80)
        print("EXECUTANDO AN√ÅLISE R√ÅPIDA (K=3)")
        print("=" * 80)

        clusterer = KMeansEpithelialClusterer(n_clusters=3, random_state=42)
        clusterer.load_data(data_path)
        clusterer.preprocess_data()
        clusterer.fit()
        cluster_stats, cluster_counts = clusterer.get_cluster_profiles()

        print("\nüìä Estat√≠sticas dos Clusters:")
        print(cluster_stats.xs("mean", level=1, axis=1))

        clusterer.visualize_clusters(
            save_path=results_path / "kmeans_distributions.png"
        )
        clusterer.visualize_cluster_means(
            save_path=results_path / "kmeans_profiles.png"
        )
        clusterer.save_results(results_path / "kmeans_results.csv")

        # Apresenta√ß√£o
        presentation = ClientPresentation(n_clusters=3)
        presentation.setup_and_train(data_path)
        presentation.generate_full_report()

    print("\n" + "=" * 80)
    print("‚úÖ AN√ÅLISE CONCLU√çDA COM SUCESSO!")
    print("=" * 80)
    print(f"\nüìÅ Resultados salvos em: {results_path}")
    print("\nArquivos gerados:")
    print("  üìä Visualiza√ß√µes de clusters")
    print("  üìà Apresenta√ß√µes para o cliente")
    print("  üíæ Resultados em CSV")


if __name__ == "__main__":
    main()
