"""
Script Principal - An√°lise de Perfis de Espessura Epitelial
Implementa a metodologia KDD completa
"""

from kmeans_clustering import KMeansEpithelialClusterer
from optimization import KOptimizer
from presentation import ClientPresentation
import sys


def print_menu():
    """Exibe o menu de op√ß√µes."""
    print("\n" + "=" * 70)
    print("  AN√ÅLISE DE PERFIS DE ESPESSURA EPITELIAL - K-MEANS CLUSTERING")
    print("  Metodologia KDD (Knowledge Discovery in Databases)")
    print("=" * 70)
    print("\nEscolha uma op√ß√£o:")
    print("  1. An√°lise Completa (Otimiza√ß√£o + Clusteriza√ß√£o + Apresenta√ß√£o)")
    print("  2. Apenas Otimiza√ß√£o do N√∫mero de Clusters (K)")
    print("  3. Apenas Clusteriza√ß√£o (com K espec√≠fico)")
    print("  4. Apenas Gerar Visualiza√ß√µes de Apresenta√ß√£o")
    print("  5. An√°lise R√°pida (K=3, sem otimiza√ß√£o)")
    print("  0. Sair")
    print("=" * 70)


def run_optimization():
    """Executa apenas a otimiza√ß√£o do n√∫mero de clusters."""
    print("\n>>> MODO: OTIMIZA√á√ÉO DO N√öMERO DE CLUSTERS")
    
    # Carregar e preparar dados
    clusterer = KMeansEpithelialClusterer()
    df = clusterer.load_and_select_data('data/RTVue_20221110_MLClass.csv')
    df_clean = clusterer.preprocess_data(df)
    
    # Otimizar K
    optimizer = KOptimizer(k_range=(2, 11))
    df_metrics, k_optimal = optimizer.optimize(df_clean)
    optimizer.plot_optimization(df_metrics)
    optimizer.save_metrics(df_metrics)
    
    print(f"\n‚úì Otimiza√ß√£o conclu√≠da! K √≥timo recomendado: {k_optimal}")
    return k_optimal


def run_clustering(n_clusters=3):
    """Executa apenas a clusteriza√ß√£o."""
    print(f"\n>>> MODO: CLUSTERIZA√á√ÉO (K={n_clusters})")
    
    # Executar pipeline KDD completo
    clusterer = KMeansEpithelialClusterer(n_clusters=n_clusters)
    df_result, df_cluster_info, metrics = clusterer.fit('data/RTVue_20221110_MLClass.csv')
    clusterer.save_results(df_result)
    
    print("\n‚úì Clusteriza√ß√£o conclu√≠da!")
    return df_result, df_cluster_info, metrics


def run_presentation(df_result=None, df_cluster_info=None):
    """Executa apenas a gera√ß√£o de visualiza√ß√µes."""
    print("\n>>> MODO: GERA√á√ÉO DE VISUALIZA√á√ïES")
    
    # Se n√£o tiver dados, carregar do arquivo salvo
    if df_result is None:
        import pandas as pd
        try:
            df_result = pd.read_csv('results/kmeans_results.csv')
            print("‚úì Resultados carregados de: results/kmeans_results.csv")
        except FileNotFoundError:
            print("‚ùå Erro: Arquivo results/kmeans_results.csv n√£o encontrado.")
            print("   Execute a clusteriza√ß√£o primeiro (op√ß√£o 1, 3 ou 5).")
            return
    
    # Gerar visualiza√ß√µes
    presentation = ClientPresentation()
    presentation.generate_all(df_result, df_cluster_info)
    
    print("\n‚úì Visualiza√ß√µes geradas com sucesso!")


def run_complete_analysis():
    """Executa a an√°lise completa: otimiza√ß√£o + clusteriza√ß√£o + apresenta√ß√£o."""
    print("\n>>> MODO: AN√ÅLISE COMPLETA")
    print("\nEsta an√°lise executar√°:")
    print("  1. Otimiza√ß√£o do n√∫mero de clusters")
    print("  2. Clusteriza√ß√£o com K √≥timo")
    print("  3. Gera√ß√£o de visualiza√ß√µes profissionais")
    
    # 1. Otimiza√ß√£o
    print("\n" + "üîç" * 35)
    print("ETAPA 1/3: OTIMIZA√á√ÉO")
    print("üîç" * 35)
    k_optimal = run_optimization()
    
    # 2. Clusteriza√ß√£o
    print("\n" + "‚öôÔ∏è" * 35)
    print("ETAPA 2/3: CLUSTERIZA√á√ÉO")
    print("‚öôÔ∏è" * 35)
    df_result, df_cluster_info, metrics = run_clustering(k_optimal)
    
    # 3. Apresenta√ß√£o
    print("\n" + "üìä" * 35)
    print("ETAPA 3/3: VISUALIZA√á√ïES")
    print("üìä" * 35)
    run_presentation(df_result, df_cluster_info)
    
    print("\n" + "=" * 70)
    print("  ‚úÖ AN√ÅLISE COMPLETA FINALIZADA COM SUCESSO!")
    print("=" * 70)
    print("\nArquivos gerados em 'results/':")
    print("  ‚Ä¢ k_optimization.png - Gr√°ficos de otimiza√ß√£o")
    print("  ‚Ä¢ k_optimization_metrics.csv - M√©tricas detalhadas")
    print("  ‚Ä¢ kmeans_results.csv - Resultados da clusteriza√ß√£o")
    print("  ‚Ä¢ 01_executive_summary.png - Resumo executivo")
    print("  ‚Ä¢ 02_detailed_profiles.png - An√°lise detalhada")
    print("  ‚Ä¢ 03_clinical_interpretation.png - Interpreta√ß√£o cl√≠nica")
    print("  ‚Ä¢ kmeans_profiles.png - Perfis radiais")
    print("  ‚Ä¢ kmeans_distributions.png - Distribui√ß√µes")


def run_quick_analysis():
    """Executa an√°lise r√°pida com K=3."""
    print("\n>>> MODO: AN√ÅLISE R√ÅPIDA (K=3)")
    
    # Clusteriza√ß√£o
    df_result, df_cluster_info, metrics = run_clustering(3)
    
    # Apresenta√ß√£o
    run_presentation(df_result, df_cluster_info)
    
    print("\n‚úì An√°lise r√°pida conclu√≠da!")


def main():
    """Fun√ß√£o principal."""
    while True:
        print_menu()
        
        try:
            choice = input("\nDigite sua op√ß√£o: ").strip()
            
            if choice == '0':
                print("\nüëã Encerrando o programa. At√© logo!")
                sys.exit(0)
            
            elif choice == '1':
                run_complete_analysis()
                input("\nPressione ENTER para continuar...")
            
            elif choice == '2':
                run_optimization()
                input("\nPressione ENTER para continuar...")
            
            elif choice == '3':
                k = int(input("\nDigite o n√∫mero de clusters (K): "))
                if k < 2:
                    print("‚ùå Erro: K deve ser >= 2")
                    continue
                run_clustering(k)
                input("\nPressione ENTER para continuar...")
            
            elif choice == '4':
                run_presentation()
                input("\nPressione ENTER para continuar...")
            
            elif choice == '5':
                run_quick_analysis()
                input("\nPressione ENTER para continuar...")
            
            else:
                print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
        
        except KeyboardInterrupt:
            print("\n\nüëã Programa interrompido pelo usu√°rio. At√© logo!")
            sys.exit(0)
        except Exception as e:
            print(f"\n‚ùå Erro: {str(e)}")
            input("\nPressione ENTER para continuar...")


if __name__ == "__main__":
    main()
